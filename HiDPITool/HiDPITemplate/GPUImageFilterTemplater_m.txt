//
//  GPUImage{{ ClassName }}Filter.m
//  GPUImageFilterCodeGenerateTool
//
//  Created by zll on 2018/3/14.
//  Copyright © 2017年 Godlike Studio. All rights reserved.
//

#import "GPUImage{{ ClassName }}Filter.h"
{% if PicTimeProcessed %}
@implementation GPUImagePicture (ProcessTime)

- (void)processImage:(CMTime)time;
{
    hasProcessedImage = YES;

    if (dispatch_semaphore_wait(imageUpdateSemaphore, DISPATCH_TIME_NOW) != 0)
    {
        return;
    }

    runAsynchronouslyOnVideoProcessingQueue(^{
        for (id<GPUImageInput> currentTarget in targets)
        {
            NSInteger indexOfObject = [targets indexOfObject:currentTarget];
            NSInteger textureIndexOfTarget = [[targetTextureIndices objectAtIndex:indexOfObject] integerValue];

            [currentTarget setCurrentlyReceivingMonochromeInput:NO];
            [currentTarget setInputSize:pixelSizeOfImage atIndex:textureIndexOfTarget];
            [currentTarget setInputFramebuffer:outputFramebuffer atIndex:textureIndexOfTarget];
            [currentTarget newFrameReadyAtTime:time atIndex:textureIndexOfTarget];
        }

        dispatch_semaphore_signal(imageUpdateSemaphore);
    });
}

@end
{% /if %}

{% if ShaderEnabled %}
NSString *const kGPUImage{{ ClassName }}FragmentShaderString = SHADER_STRING
(
precision mediump float;

varying vec2 textureCoordinate;
varying vec2 leftTextureCoordinate;
varying vec2 rightTextureCoordinate;

varying vec2 topTextureCoordinate;
varying vec2 topLeftTextureCoordinate;
varying vec2 topRightTextureCoordinate;

varying vec2 bottomTextureCoordinate;
varying vec2 bottomLeftTextureCoordinate;
varying vec2 bottomRightTextureCoordinate;

uniform sampler2D inputImageTexture;
uniform float edgeStrength;

void main()
{
float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;
float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;
float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;
float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;
float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;
float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;
float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;
float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;
float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;
float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;

// 边缘强度*0.7
float mag = length(vec2(h, v)) * edgeStrength * 0.5;

// 指定颜色462a75 （RGB归一化后的值为0.275, 0.165, 0.459）
highp vec3 specificColor = vec3(0.275, 0.165, 0.459);

// 色彩还原为指定颜色
gl_FragColor = vec4(specificColor, mag);
}
);
{% /if %}
@interface GPUImage{{ ClassName }}Filter ()
{   {% for texture in TextureAttributes %}{% if texture.type equalsString "GPUImagePicture" %}
    {{ texture.type }} *_{{ texture.attr }}PictureInput; // 第{{ currentLoop.currentIndex }}层纹理{% else %}
    {{ texture.type }}   *_{{ texture.attr }}MovieInput; // 视频输入{% /if %}{% /for %}
}
@end

@implementation GPUImage{{ ClassName }}Filter

- (id)init
{   {% if ShaderEnabled %}
    if (nil != (self = [super initWithFragmentShaderFromString:kGPUImage{{ ClassName }}FragmentShaderString])){% else %}
    if (nil != (self = [super init])){% /if %}
    {   {% for texture in TextureAttributes %}{% if texture.type equalsString "GPUImagePicture" %}{% if !iOSPlatform %}
        _{{ texture.attr }}PictureInput = [[GPUImagePicture alloc] initWithURL:[NSURL URLWithString:@"{{ texture.resource }}"]];{% else %}
        _{{ texture.attr }}PictureInput = [[GPUImagePicture alloc] imageNamed:@"{{ texture.resource }}"];{% /if %}{% else %}{% if !iOSPlatform %}
        _{{ texture.attr }}MovieInput = [[GPUImageMovie alloc] initWithURL:[NSURL URLWithString:@"{{ texture.resource }}"]];{% else %}
        _{{ texture.attr }}PictureInput = [[GPUImageMovie alloc] initWithURL:[NSURL URLWithString:[[NSBundle mainBundle] pathForResource:[@"{{ texture.resource }}" stringByDeletingPathExtension] ofType:[@"{{ texture.resource }}" pathExtension]]]];{% /if %}{% /if %}{% /for %}
    }
    return self;
}

- (void)newFrameReadyAtTime:(CMTime)frameTime atIndex:(NSInteger)textureIndex
{

    [super newFrameReadyAtTime:frameTime atIndex:textureIndex];
}

- (void)renderToTextureWithVertices:(const GLfloat *)vertices textureCoordinates:(const GLfloat *)textureCoordinates
{
    if (self.preventRendering)
    {
        [firstInputFramebuffer unlock];
        return;
    }
    [GPUImageContext setActiveShaderProgram:filterProgram];

    outputFramebuffer = [[GPUImageContext sharedFramebufferCache] fetchFramebufferForSize:[self sizeOfFBO]
    textureOptions:self.outputTextureOptions
    onlyTexture:NO];
    [outputFramebuffer activateFramebuffer];

    if (usingNextFrameForImageCapture)
    {
        [outputFramebuffer lock];
    }



    [firstInputFramebuffer unlock];

    if (usingNextFrameForImageCapture)
    {
        dispatch_semaphore_signal(imageCaptureSemaphore);
    }

    [self setUniformsForProgramAtIndex:0];
}

- (void)setInputSize:(CGSize)newSize atIndex:(NSInteger)textureIndex
{
    [super setInputSize:newSize atIndex:textureIndex];

    if (CGSizeEqualToSize(newSize, CGSizeZero))
    {
        return;
    }
}

@end
